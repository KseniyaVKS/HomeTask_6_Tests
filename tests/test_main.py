import pytest
from main import unique_names, top_3, courses_duration, YandexDisk_folder

with open(r'D:\PycharmProjects\HomeTask_6_Tests\token_yandex.txt', 'r') as f:
    token_yandex = f.read().strip()

class Test_1():
    @pytest.mark.parametrize(
        "list_name, expected", [
            (['Евгений Шмаргунов', 'Олег Булыгин', 'Дмитрий Демидов', 'Кирилл Табельский', 'Александр Ульянцев',
              'Александр Бардин'], 'Уникальные имена преподавателей: Александр, Дмитрий, Евгений, Кирилл, Олег'),
            (['Вадим Ерошевичев', 'Тимур Сейсембаев', 'Максим Батырев', 'Никита Шумский', 'Алексей Степанов',
              'Денис Коротков', 'Антон Глушков', 'Сергей Индюков', 'Максим Воронцов', 'Евгений Грязнов'], 'Уникальные '
              'имена преподавателей: Алексей, Антон, Вадим, Денис, Евгений, Максим, Никита, Сергей, Тимур'),
            (['Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Максим Филипенко', 'Елена Никитина',
              'Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Валерий Хаслер', 'Татьяна Тен'], 'Уникальные '
              'имена преподавателей: Валерий, Владимир, Евгений, Елена, Максим, Татьяна, Эдгар')
        ]
    )

    def test_1(self, list_name, expected):
        res = unique_names(list_name)
        assert res == expected

    @pytest.mark.parametrize(
        "list_name", [
            (['Евгений Шмаргунов', 'Олег Булыгин', 'Дмитрий Демидов', 'Кирилл Табельский', 'Александр Ульянцев',
              'Александр Бардин']),
            (['Вадим Ерошевичев', 'Тимур Сейсембаев', 'Максим Батырев', 'Никита Шумский', 'Алексей Степанов',
              'Денис Коротков', 'Антон Глушков', 'Сергей Индюков', 'Максим Воронцов', 'Евгений Грязнов']),
            (['Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Максим Филипенко', 'Елена Никитина',
              'Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Валерий Хаслер', 'Татьяна Тен'])
            ]
    )
    def test_2(self, list_name):
        res = unique_names(list_name)
        assert isinstance(res, str)

    @pytest.mark.parametrize(
        "list_name", [
            (['Евгений Шмаргунов', 'Олег Булыгин', 'Дмитрий Демидов', 'Кирилл Табельский', 'Александр Ульянцев',
              'Александр Бардин']),
            (['Вадим Ерошевичев', 'Тимур Сейсембаев', 'Максим Батырев', 'Никита Шумский', 'Алексей Степанов',
              'Денис Коротков', 'Антон Глушков', 'Сергей Индюков', 'Максим Воронцов', 'Евгений Грязнов']),
            (['Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Максим Филипенко', 'Елена Никитина',
              'Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Валерий Хаслер', 'Татьяна Тен'])
        ]
    )
    @pytest.mark.xfail
    def test_3(self, list_name):
        res = unique_names(list_name)
        assert isinstance(res, list)



class Test_2():
    @pytest.mark.parametrize(
        "list_name", [
            (['Евгений Шмаргунов', 'Олег Булыгин', 'Дмитрий Демидов', 'Кирилл Табельский', 'Александр Ульянцев',
              'Александр Бардин']),
            (['Вадим Ерошевичев', 'Тимур Сейсембаев', 'Максим Батырев', 'Никита Шумский', 'Алексей Степанов',
              'Денис Коротков', 'Антон Глушков', 'Сергей Индюков', 'Максим Воронцов', 'Евгений Грязнов']),
            (['Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Максим Филипенко', 'Елена Никитина',
              'Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Валерий Хаслер', 'Татьяна Тен'])
        ]
    )
    def test_2(self, list_name):
        res = top_3(list_name)
        assert isinstance(res, str)


class Test_3():

    @pytest.mark.parametrize(
        "courses_list, expected", [
            ([{'title': 'Java-разработчик с нуля',
               'mentors': ['Филипп Воронов', 'Анна Юшина', 'Иван Бочаров', 'Анатолий Корсаков', 'Юрий Пеньков',
                           'Илья Сухачев', 'Иван Маркитан', 'Ринат Бибиков', 'Вадим Ерошевичев', 'Тимур Сейсембаев',
                           'Максим Батырев', 'Никита Шумский', 'Алексей Степанов', 'Денис Коротков', 'Антон Глушков',
                           'Сергей Индюков', 'Максим Воронцов', 'Евгений Грязнов', 'Константин Виролайнен',
                           'Сергей Сердюк', 'Павел Дерендяев'], 'duration': 14},
              {'title': 'Fullstack-разработчик на Python',
               'mentors': ['Евгений Шмаргунов', 'Олег Булыгин', 'Александр Бардин', 'Александр Иванов',
                           'Кирилл Табельский', 'Александр Ульянцев', 'Роман Гордиенко', 'Адилет Асканжоев',
                           'Александр Шлейко', 'Алена Батицкая', 'Денис Ежков', 'Владимир Чебукин', 'Эдгар Нуруллин',
                           'Евгений Шек', 'Максим Филипенко', 'Елена Никитина'], 'duration': 20}],
             ['Java-разработчик с нуля - 14 месяцев', 'Fullstack-разработчик на Python - 20 месяцев']),
            ([{'title': 'Python-разработчик с нуля',
              'mentors': ['Евгений Шмаргунов', 'Олег Булыгин', 'Дмитрий Демидов', 'Кирилл Табельский',
                          'Александр Ульянцев', 'Александр Бардин', 'Александр Иванов', 'Антон Солонилин',
                          'Максим Филипенко', 'Елена Никитина', 'Азамат Искаков', 'Роман Гордиенко'], 'duration': 12},
             {'title': 'Frontend-разработчик с нуля',
              'mentors': ['Владимир Чебукин', 'Эдгар Нуруллин', 'Евгений Шек', 'Валерий Хаслер', 'Татьяна Тен',
                          'Александр Фитискин', 'Александр Шлейко', 'Алена Батицкая', 'Александр Беспоясов',
                          'Денис Ежков', 'Николай Лопин', 'Михаил Ларченко'], 'duration': 20}],
             ['Python-разработчик с нуля - 12 месяцев', 'Frontend-разработчик с нуля - 20 месяцев'])
        ]
    )
    def test_1(self, courses_list, expected):
        res = courses_duration(courses_list)
        assert res == expected


class Test_YandexDisk_folder():

    @pytest.mark.parametrize(
        "token, expected", [
            (token_yandex, 201),
            ('y0_AgBBBBB0R7hcAADLWwAAAADljjvASCQOl3pjQz-JuCLfAasSCkhSyJ', 401)
        ]
    )
    def test_1(self, token, expected):
        res = YandexDisk_folder(token)
        assert res == expected